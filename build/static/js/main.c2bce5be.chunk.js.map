{"version":3,"sources":["Nav.js","Video.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faRectangleWide","Nav","react_default","a","createElement","Container","className","Row","Col","xs","align","react_fontawesome_index_es","icon","size","Component","Video","autoPlay","loop","src","Footer","Button","color","App","src_Nav_0","src_Video","src_Footer_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+WAMAA,IAAQC,IAAIC,uBAmBGC,mLAdX,MAAO,CACLC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,UAAU,cACnBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKF,UAAU,OAAOG,GAAG,KAAzB,WACAP,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAG,MACRP,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAG,IAAIH,UAAU,OAAOI,MAAM,SACjCR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAiBC,KAAMZ,kBAAiBa,KAAK,kBATvCC,aCGHC,mLANX,MAAO,CACLb,EAAAC,EAAAC,cAAA,SAAOY,UAAQ,EAACC,MAAI,EAACC,IAAI,sEAJXJ,qBCsBLK,0LAjBX,MAAO,CACLjB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAG,MACNP,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAb,eAAoCJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,cAAhB,cACpCJ,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,qEACAF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAQC,MAAM,SAAd,wBAXOP,cCcNQ,mLARX,MAAO,CACLpB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,cALYX,aCIEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c2bce5be.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Container, Row, Col } from 'reactstrap';\nimport './Nav.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faRectangleWide } from '@fortawesome/pro-light-svg-icons/faRectangleWide';\nlibrary.add(faRectangleWide)\n\nclass Nav extends Component {\n\n  render(){\n    return [\n      <Container className=\"navigation\">\n        <Row>\n          <Col className=\"logo\" xs=\"2\">&lt;/J03L&gt;</Col>\n          <Col xs=\"8\"></Col>\n          <Col xs=\"2\" className=\"menu\" align=\"right\">\n            <FontAwesomeIcon icon={faRectangleWide} size=\"2x\" />\n          </Col>\n        </Row>\n      </Container>\n    ]\n  }\n}\n\nexport default Nav\n","import React, { Component } from 'react'\n\nclass Video extends Component {\n\n  render(){\n    return [\n      <video autoPlay loop src=\"http://joelsigel.com/mock-404/assets/videos/342932613.mp4\"></video>\n    ]\n  }\n}\n\nexport default Video\n","import React, { Component } from 'react'\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport './Footer.css';\n\nclass Footer extends Component {\n\n  render(){\n    return [\n      <footer className=\"footer\">\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <p className=\"subtitle\">Something | <span className=\"text-muted\">Something</span></p>\n              <h2>Something</h2>\n              <p>Something with something else might make something more.</p>\n              <Button color=\"white\">Danger! </Button>\n            </Col>\n          </Row>\n        </Container>\n      </footer>\n    ]\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from './Nav';\nimport Video from './Video';\nimport Footer from './Footer';\n\nclass App extends Component {\n  render() {\n    return [\n      <Nav />,\n      <Video />,\n      <Footer />\n    ]\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}